{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "APIs",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Users",
      "description": "User api"
    },
    {
      "name": "Albums",
      "description": "Albums api"
    },
    {
      "name": "Posts",
      "description": "Posts api"
    },
    {
      "name": "Locations",
      "description": "Locations api"
    },
    {
      "name": "Requests",
      "description": "Requests api"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {},
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List all Users",
        "description": "Returns a list of all users, optionally filtered by search term",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A search term to filter the list of users"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}/friends": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users friends",
        "description": "Returns array of Users, that are friends with current user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of User whose friends requesting"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Detail",
        "description": "Returns extended user object",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "username of user account"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDetail"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Returns extended user object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "email"
                },
                "password": {
                  "type": "string",
                  "example": "new password"
                },
                "profileName": {
                  "type": "string",
                  "example": "new profile name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDetail"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Returns extended user object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}/like": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Like post",
        "description": "Returns extended user object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of user"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postId": {
                  "type": "number",
                  "example": 111
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDetail"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/friends/remove": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Unfriend user",
        "description": "Returns extended user object",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "id",
            "in": "param",
            "required": true,
            "type": "string",
            "description": "ID of user"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "friendId": {
                  "type": "string",
                  "example": "UUID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/locations/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "location",
            "in": "body",
            "description": "Location that is being added",
            "schema": {
              "$ref": "#/definitions/AddLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Location created",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "Update an location by ID",
        "description": "Updates the location with the given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the location to be updated"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Location",
            "in": "body",
            "description": "Data to update location",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Location updated",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Location not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "Delete an location by ID",
        "description": "Deletes the location with the given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of location to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Location deleted",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/albums/": {
      "get": {
        "tags": [
          "Albums"
        ],
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Albums"
        ],
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Album",
            "in": "body",
            "description": "album that is being added",
            "schema": {
              "$ref": "#/definitions/AddAlbum"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/albums/{id}": {
      "get": {
        "tags": [
          "Albums"
        ],
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Albums"
        ],
        "summary": "Update an album by ID",
        "description": "Updates the album with the given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the album to be updated"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Album",
            "in": "body",
            "description": "Data to update album",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAlbum"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Album updated",
            "schema": {
              "$ref": "#/definitions/Album"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Album not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Albums"
        ],
        "summary": "Delete an album by ID",
        "description": "Deletes the album with the given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of album to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Album deleted",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/posts/": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "List all Posts",
        "description": "Returns a list of all posts, optionally filtered by search term",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A search term to filter the list of posts"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "Add post",
        "description": "Returning post object",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddPost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostDetail"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/posts/{id}/likes": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get number of likes on post",
        "description": "returns number of likes on post based on id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "type": "number"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/posts/{id}": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Post Detail",
        "description": "Returns extended post object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostDetail"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Post not found",
            "schema": {
              "$ref": "#/definitions/UserDetail"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Posts"
        ],
        "summary": "Update Post",
        "description": "Returns extended post object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostDetail"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Posts"
        ],
        "summary": "Delete post",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "example": "any"
                },
                "profileName": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/auth/refreshToken": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "refreshToken": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/auth/revokeRefreshTokens": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/requests/{type}/{id}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/requests/send": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "fromId": {
                  "example": "any"
                },
                "toId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/requests/handle": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "example": "any"
                },
                "status": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/tokens/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/tokens/add": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/tokens/delete": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "152521515"
        },
        "username": {
          "type": "string",
          "example": "SomeName"
        },
        "profileName": {
          "type": "string",
          "example": "Dude 1"
        },
        "email": {
          "type": "string",
          "example": "thisIsTheemail@gmail.com"
        }
      }
    },
    "UserList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "UserDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "152521515"
        },
        "username": {
          "type": "string",
          "example": "SomeName"
        },
        "profileName": {
          "type": "string",
          "example": "Dude 1"
        },
        "email": {
          "type": "string",
          "example": "thisIsTheemail@gmail.com"
        },
        "followedAlbums": {
          "$ref": "#/definitions/AlbumList"
        },
        "ownedAlbums": {
          "$ref": "#/definitions/AlbumList"
        },
        "friends": {
          "$ref": "#/definitions/UserList"
        },
        "friendedBy": {
          "$ref": "#/definitions/UserList"
        },
        "likedPost": {
          "$ref": "#/definitions/PostList"
        },
        "posts": {
          "$ref": "#/definitions/PostList"
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 152
        },
        "name": {
          "type": "string",
          "example": "Lomnicky Stit"
        },
        "longitude": {
          "type": "string",
          "example": "49.19658843800614"
        },
        "latitude": {
          "type": "string",
          "example": "20.213747396503443"
        }
      }
    },
    "LocationList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Location"
      }
    },
    "AddLocation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Tesco Lamač Bratislava"
        },
        "longitude": {
          "type": "string",
          "example": "48.17677398662877"
        },
        "latitude": {
          "type": "string",
          "example": "17.06544830967026"
        }
      },
      "required": [
        "name",
        "longitude",
        "latitude"
      ]
    },
    "UpdateLocation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Tesco Lamač Bratislava"
        },
        "longitude": {
          "type": "string",
          "example": "48.17677398662877"
        },
        "latitude": {
          "type": "string",
          "example": "17.06544830967026"
        }
      },
      "required": [
        "name",
        "longitude",
        "latitude"
      ]
    },
    "Album": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 111
        },
        "title": {
          "type": "string",
          "example": "Stretnutie na plazi"
        },
        "description": {
          "type": "string",
          "example": ""
        },
        "ownerId": {
          "type": "string",
          "example": "152521515"
        },
        "tags": {
          "type": "array",
          "example": [
            "leto",
            "more",
            "relax"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AlbumList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Album"
      }
    },
    "AddAlbum": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Novy rok nove ja"
        },
        "description": {
          "type": "string",
          "example": "Zmena je na dosah, tento rok to bude ine"
        },
        "tags": {
          "type": "array",
          "example": [
            "Silvester",
            "novy",
            "predsavzatia"
          ],
          "items": {
            "type": "string"
          }
        },
        "ownerId": {
          "type": "string",
          "example": "152521515"
        }
      },
      "required": [
        "title",
        "ownerId"
      ]
    },
    "UpdateAlbum": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Prvy april"
        },
        "description": {
          "type": "string",
          "example": "Ako Abraham Lincoln raz povedal: never nicomu co vidis na internete"
        },
        "tags": {
          "type": "array",
          "example": [
            "blazni",
            "prvyapril"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "title"
      ]
    },
    "Post": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 15
        },
        "title": {
          "type": "string",
          "example": "Potapanie sa"
        },
        "photo": {
          "type": "object",
          "properties": {
            "0": {
              "type": "number",
              "example": 47
            },
            "1": {
              "type": "number",
              "example": 57
            },
            "2": {
              "type": "number",
              "example": 106
            },
            "3": {
              "type": "number",
              "example": 47
            },
            "4": {
              "type": "number",
              "example": 52
            },
            "5": {
              "type": "number",
              "example": 65
            },
            "6": {
              "type": "number",
              "example": 65
            },
            "7": {
              "type": "number",
              "example": 81
            },
            "8": {
              "type": "number",
              "example": 83
            },
            "9": {
              "type": "number",
              "example": 107
            },
            "10": {
              "type": "number",
              "example": 90
            },
            "11": {
              "type": "number",
              "example": 74
            },
            "12": {
              "type": "number",
              "example": 82
            },
            "13": {
              "type": "number",
              "example": 103
            },
            "14": {
              "type": "number",
              "example": 65
            },
            "15": {
              "type": "number",
              "example": 66
            },
            "16": {
              "type": "number",
              "example": 65
            },
            "17": {
              "type": "number",
              "example": 81
            },
            "18": {
              "type": "number",
              "example": 69
            },
            "19": {
              "type": "number",
              "example": 65
            },
            "20": {
              "type": "number",
              "example": 83
            },
            "21": {
              "type": "number",
              "example": 65
            },
            "22": {
              "type": "number",
              "example": 66
            },
            "23": {
              "type": "number",
              "example": 73
            },
            "24": {
              "type": "number",
              "example": 65
            },
            "25": {
              "type": "number",
              "example": 65
            },
            "26": {
              "type": "number",
              "example": 68
            },
            "27": {
              "type": "number",
              "example": 47
            }
          }
        },
        "description": {
          "type": "string",
          "example": "Nie vsetky dobre veci su napovrchu"
        },
        "userId": {
          "type": "string",
          "example": "152521515"
        },
        "albumId": {
          "type": "number",
          "example": 111
        },
        "locationId": {
          "type": "number",
          "example": 145
        }
      }
    },
    "PostDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 15
        },
        "title": {
          "type": "string",
          "example": "Potapanie sa"
        },
        "photo": {
          "type": "object",
          "properties": {
            "0": {
              "type": "number",
              "example": 47
            },
            "1": {
              "type": "number",
              "example": 57
            },
            "2": {
              "type": "number",
              "example": 106
            },
            "3": {
              "type": "number",
              "example": 47
            },
            "4": {
              "type": "number",
              "example": 52
            },
            "5": {
              "type": "number",
              "example": 65
            },
            "6": {
              "type": "number",
              "example": 65
            },
            "7": {
              "type": "number",
              "example": 81
            },
            "8": {
              "type": "number",
              "example": 83
            },
            "9": {
              "type": "number",
              "example": 107
            },
            "10": {
              "type": "number",
              "example": 90
            },
            "11": {
              "type": "number",
              "example": 74
            },
            "12": {
              "type": "number",
              "example": 82
            },
            "13": {
              "type": "number",
              "example": 103
            },
            "14": {
              "type": "number",
              "example": 65
            },
            "15": {
              "type": "number",
              "example": 66
            },
            "16": {
              "type": "number",
              "example": 65
            },
            "17": {
              "type": "number",
              "example": 81
            },
            "18": {
              "type": "number",
              "example": 69
            },
            "19": {
              "type": "number",
              "example": 65
            },
            "20": {
              "type": "number",
              "example": 83
            },
            "21": {
              "type": "number",
              "example": 65
            },
            "22": {
              "type": "number",
              "example": 66
            },
            "23": {
              "type": "number",
              "example": 73
            },
            "24": {
              "type": "number",
              "example": 65
            },
            "25": {
              "type": "number",
              "example": 65
            },
            "26": {
              "type": "number",
              "example": 68
            },
            "27": {
              "type": "number",
              "example": 47
            }
          }
        },
        "description": {
          "type": "string",
          "example": "Nie vsetky dobre veci su napovrchu"
        },
        "userId": {
          "type": "string",
          "example": "152521515"
        },
        "albumId": {
          "type": "number",
          "example": 111
        },
        "locationId": {
          "type": "number",
          "example": 145
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "album": {
          "$ref": "#/definitions/Album"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "likedBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "PostList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Post"
      }
    },
    "AddPost": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Potapanie sa"
        },
        "photo": {
          "type": "string",
          "example": "Base64String"
        },
        "description": {
          "type": "string",
          "example": "Nie vsetky dobre veci su napovrchu"
        },
        "userId": {
          "type": "string",
          "example": "152521515"
        },
        "albumId": {
          "type": "number",
          "example": 111
        },
        "locationId": {
          "type": "number",
          "example": 145
        }
      },
      "required": [
        "title",
        "photo",
        "userId",
        "albumId",
        "locationId"
      ]
    },
    "Request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 12
        },
        "fromID": {
          "type": "string",
          "example": "152521515"
        },
        "toID": {
          "type": "string",
          "example": "295821485"
        }
      }
    }
  }
}